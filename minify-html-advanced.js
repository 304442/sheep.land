const fs = require('fs-extra');
const { minify } = require('html-minifier-terser');
const path = require('path');

// Advanced HTML minification with Alpine.js preservation
async function minifyHTMLAdvanced() {
  const inputFiles = ['./public/index.html', './public/setup.html'];
  
  for (const inputPath of inputFiles) {
    if (!await fs.pathExists(inputPath)) {
      console.log(`⚠️  Skipping ${inputPath} - file not found`);
      continue;
    }
    
    const outputPath = inputPath.replace('.html', '.min.html');
    
    try {
      const html = await fs.readFile(inputPath, 'utf8');
      
      const minifiedHTML = await minify(html, {
        // Basic options
        removeComments: true,
        removeCommentsFromCDATA: true,
        removeCDATASectionsFromCDATA: true,
        collapseWhitespace: true,
        collapseBooleanAttributes: true,
        removeAttributeQuotes: false, // Keep for Alpine.js
        removeRedundantAttributes: true,
        useShortDoctype: true,
        removeEmptyAttributes: false, // Keep for Alpine.js bindings
        removeOptionalTags: false, // Safer for complex apps
        removeEmptyElements: false, // Keep for Alpine.js templates
        
        // JavaScript handling
        minifyJS: true,
        processScripts: ['text/javascript', 'application/javascript'],
        
        // CSS handling
        minifyCSS: true,
        
        // URL handling
        minifyURLs: false,
        
        // Attribute handling
        removeScriptTypeAttributes: true,
        removeStyleLinkTypeAttributes: true,
        sortAttributes: false, // Don't sort to preserve Alpine.js order
        sortClassName: false,
        
        // Alpine.js specific
        customAttrSurround: [
          [/@/, /(?:)/], // For @ shorthand
          [/:/, /(?:)/], // For : shorthand
          [/x-/, /(?:)/] // For x- attributes
        ],
        customEventAttributes: [/^x-on:?/],
        ignoreCustomFragments: [
          /x-[\w-:]+/, // Alpine.js attributes
          /<\?[\s\S]*?\?>/,
          /<%[\s\S]*?%>/,
          /<jsp:.*?\/>/
        ],
        
        // Advanced options
        caseSensitive: true,
        conservativeCollapse: false,
        continueOnParseError: false,
        decodeEntities: true,
        html5: true,
        includeAutoGeneratedTags: false,
        keepClosingSlash: false,
        maxLineLength: false,
        preserveLineBreaks: false,
        preventAttributesEscaping: false,
        processConditionalComments: true,
        quoteCharacter: '"',
        removeTagWhitespace: false, // Safer for inline elements
        trimCustomFragments: true,
        
        // Custom processing function for inline scripts
        minifyJS: (text, inline) => {
          // Skip Alpine.js expressions
          if (inline && (text.includes('x-') || text.includes('@'))) {
            return text;
          }
          
          // Use Terser for actual JavaScript
          const { minify } = require('terser');
          try {
            const result = minify(text, {
              compress: {
                drop_console: false,
                drop_debugger: true
              },
              mangle: false, // Don't mangle inline scripts
              format: {
                comments: false
              }
            });
            return result.code || text;
          } catch (e) {
            return text;
          }
        },
        
        // Custom processing function for inline CSS
        minifyCSS: (text) => {
          const CleanCSS = require('clean-css');
          const minified = new CleanCSS({
            level: 2,
            inline: ['local']
          }).minify(text);
          return minified.styles || text;
        }
      });
      
      // Post-process for additional optimizations
      let finalHTML = minifiedHTML;
      
      // Remove unnecessary whitespace around tags
      finalHTML = finalHTML.replace(/>\s+</g, '><');
      
      // Remove whitespace in self-closing tags
      finalHTML = finalHTML.replace(/\s+\/>/g, '/>');
      
      // Optimize Alpine.js directives
      finalHTML = finalHTML.replace(/x-data=""\s/g, 'x-data ');
      
      // Write the minified HTML
      await fs.writeFile(outputPath, finalHTML);
      
      // Also create a production version that updates asset references
      if (inputPath.includes('index.html')) {
        const prodHTML = finalHTML
          .replace(/app\.js/g, 'app.min.js')
          .replace(/styles\.css/g, 'styles.min.css')
          .replace(/vendor\/(alpine|pocketbase)\.js/g, 'vendor/$1.min.js');
        
        await fs.writeFile('./public/index.prod.html', prodHTML);
      }
      
      // Calculate statistics
      const originalSize = Buffer.byteLength(html);
      const minifiedSize = Buffer.byteLength(finalHTML);
      const reduction = ((originalSize - minifiedSize) / originalSize * 100).toFixed(2);
      
      console.log(`✅ HTML Minification Complete for ${path.basename(inputPath)}!`);
      console.log(`   Original: ${(originalSize / 1024).toFixed(2)} KB`);
      console.log(`   Minified: ${(minifiedSize / 1024).toFixed(2)} KB`);
      console.log(`   Reduction: ${reduction}%`);
      
    } catch (error) {
      console.error(`Error minifying ${inputPath}:`, error);
    }
  }
}

// Run if called directly
if (require.main === module) {
  minifyHTMLAdvanced();
}

module.exports = minifyHTMLAdvanced;